PolyDist README.
PolyDist version 0.11

Contributors:
Fred Barclay
Inspired by Matlab (R) code written by the author and W. Scott Ingram for the
University of Texas M. D. Anderson Cancer Center. This code is not affiliated
with M. D. Anderson Cancer Center and is clean of any code authored or owned by
this institution.

Website:
https://fred-barclay.github.io/PolyDist/
GitHub Repo: https://github.com/Fred-Barclay/PolyDist

Requires:
Python 3.4
Matplotlib 1.4.2
Shapely 1.4.3
Xlsxwriter 0.5.2

Tested up to:
Python 3.4.2
Matplotlib 1.4.2
Shapely 1.4.3
Xlsxwriter 0.5.2

You may succeed in running PolyDist under newer/older versions than those listed
above--they are just the instances I've tested. If so, please let me know!

================================================================================
Licensing:
This program is dual-licensed under the GPL v2 , or (at your option) any later
version, and the following terms:

	You are hereby granted a perpetual, irrevocable license to copy, modify,
	publish, release, and distribute this program as you see fit. However,
	under no circumstances may you claim original authorship of this program;
	you must credit the original author(s). You may not remove the listing of
	the original author(s) from the source code, though you may change the
	licensing terms, provided that your terms do not permit the removal of the
	author(s) listing. If you publish or release binaries or similarly compiled
	files, you must credit the author(s) on your home and/or distribution page,
	whichever applies. In your documentation, you must credit the author(s) for
	the portions of their code you have used. This, of course, does not revoke
	or change your right to claim original authorship to any portions of the
	code that you have written.

	You must agree to assume all liability for your use of the program, and to
	indemnify and hold harmless the author(s) of this program from any liability
	arising from use of this program, including, but not limited to: loss of
	data, death, dismemberment, or injury, and all consequential and
	inconsequential damages.

	For clarification, contact Fred Barclay:
		https://github.com/Fred-Barclay
		BugsAteFred@gmail.com

A copy of the GPL v2 is included along with this program, in the GPLv2_LICENSE
file.
================================================================================
PolyDist calculates the distances from a main point to other points (subpoints)
along the perimeter of a 2-dimensional field. The subpoints are not
user-defined; however, their frequency and spacing is.


================================================================================
Description:
PolyDist defines a main point and a polygon using a tuple and a list of tuples.
The tuple defines a point; the list defines the vertices of the polygon. The
user also provides a integer as the degrees that a ray radiating from the main
point should be rotated in an anti-clockwise fashion.

At each rotation of the ray, it intersects the perimeter of the polygon at a
discrete point, or (for irregular polygons) at multiple discrete points. The
distance(s) from the main point to these subpoints is then calculated and
returned.

Additionally, a graph is returned of the figure and and .xlsx spreadsheet is
created (inside the working directory) containing the distances.

For example, say I have point (3,5) that is contained inside a field whose
perimeter is (0,0), (0,9), (4,7), (8,8), and (6,2). I also want the
intersections (subpoints) to be set every 15 degrees:

python3 PolyDist.py
"Main point coordinates:" (3,5)
"Vertices coordinates:" [(0,0),(0,9),(4,7),(8,8),(6,2)]
"Angle of rotation:" 15

At this point the code should execute and return the distances, a graph of the
figure, and an .xlsx file containing the distances.


================================================================================
Notes:
While my goal is to use a true ray to intersect the perimeter, I was unable to
integrate one with Shapely. Therefore, I have used a long line segment that I
believe will serve for the time being.

Both regular and irregular polygons are supported.

================================================================================
Revision History:

0.2.3
Moved to a new, dual-license model.

Began releasing with semantic versioning.

Revised depencies listed at start of code. Only Shapely is required; xlsxwriter
and matplotlib are recommended.

Added 'Figure graphed sucessfully!' message (aids debugging if needed).

Corrected spelling of 'Intersections'

0.22
Changed default behavior of graphing/exporting to Calc to 'N'. Allowed either
'y' or 'Y' to be "yes".

Modified roadmap in PolyDist_README.txt

Began signing commits with GPG as per "git commit -m -S <message>". Continuted
to create detached, armoured signatures.

The following permission was added to the license: "(c). Redistribute copies,
whether modified or unchanged, freely."

Edited README.md to reflect GPG changes.


0.21
Restored imports of xlsxwriter and matplotlib.pyplot to all instances.


0.2
Corrected spelling in license, made creating an .xlsx spreadsheet and/or
plotting a graph optional, and consistently used single quotes ('') for strings
instead of double quotes. Importing xlsxwriter and matplotlib.pyplot were only
triggered if the user chose to export the data to a spreadsheet or plot the
figure, respectively, saving startup time.

Edited README.md.


0.1
Removed the need for a Python function and migrated to a dot decimal point in
documentation, as well as improved code commenting.


0,02
Set the .xlsx file to be created before the graph. Previously, the graph had to
be closed before the spreadsheet was created.


0,01
Initial release.


================================================================================
Roadmap:

v. 1: Implement GUI front-end.
v. 2: Add graphics field support.

(Not in any particular order)
1. Possibly move to .odt format instead of .xlsx.
2. Use a true ray instead of a really long line segment.
3. Have the .xlsx returned as a cascading filename, instead of overwriting the
   same file every run.
4. Let the user define the .xlsx file name (negate item 4).
5. Improve the README.
6. Improve colouring on the graph.
7. Consider moving to the GPL license.


================================================================================
Contact info:
For bugs, please contact me at BugsAteFred@gmail.com, or through GitHub. You're
welcome to submit patches (or, as I like to call them, "bug squashers") as well!

For suggestions/queries/improvements, I'm still unsure of what the preferred
method of contact is. Just follow the same steps as bug squashing outlined
above.


================================================================================
Final thoughts:

If it ain't broke, fix it until it is!
Generating random numbers is too important to be left to chance.
Keep smiling! It makes people wonder what you've been up to.
